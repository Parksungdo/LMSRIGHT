<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.adm.dao.EmployDao">
	
	<!-- 로그인 정보 가져오기 -->
	<!-- <select id = "userinfo" resultType="kr.happyjob.study.adm.model.EmployModel">
	select  loginID
		  , name
 	  from tb_userinfo
		where loginID = #{loginID}
	</select> -->
	
	<!-- 취업 정보 등록 -->
	<select id = "empclasslist" resultType="kr.happyjob.study.adm.model.EmployModel">
 		     <!-- select @rownum := @rownum + 1 as num
 		     		, em.employ_no
 		     		, ui.loginID
 		     		, ui.name
 		     		, ui.user_hp
 		     		, ui.user_regdate
 			   from (select @rownum := 0) tmp, tb_employ em
  			  inner join tb_userinfo ui ON ui.loginID = em.loginID
  			  where ui.user_type='A'
  			  ORDER BY em.employ_no desc
 		  	  LIMIT #{startnum}, #{pageSize} -->
 		  	  select @rownum := @rownum + 1 as num
 		     		, em.employ_no
 		     		, ui.loginID
 		     		, ui.name
 		     		, ui.user_hp
 		     		, ui.user_regdate
 			   from (select @rownum := 0) tmp, tb_employ em
  			  inner join tb_userinfo ui ON ui.loginID = em.loginID
  			  <where>
  			  		<if test="(empstuSearch != null) and (!empstuSearch.equals(''))">
  			  			 and ui.loginID = #{empstuSearch}
  			  			 and ui.user_type='A'
  			  		</if>
  			  </where> 
  			  ORDER BY em.employ_no desc
 		  	  LIMIT #{startnum}, #{pageSize}
	</select>
	
	<!-- 취업 정보 등록 학생 cnt 확인하기. -->
	<select id="studentclasscnt" resultType="int">
		 select count(*)
   		   from tb_userinfo tu
  		  where tu.user_type = 'A'
  		    <!-- select  count(*)
 			  from tb_student st
  		inner join tb_userinfo ui on st.loginID = ui.loginID
 			 where ui.user_type = 'A' -->
	</select>
	
	<!-- 하단 학생에 대한 detail 내용 -->
	<select id="detailcontent" resultType="kr.happyjob.study.adm.model.EmployModel">
	  select em.employ_no
	 		, ui.loginID
	 		, ui.name
	 		, ui.user_hp
	 		, ui.user_regdate
	 		, em.employ_join
	 		, em.employ_leave
	 		, em.employ_state
	 		, em.employ_name
   		from tb_employ em
	   inner join tb_userinfo ui ON ui.loginID = em.loginID
	   where ui.user_type='A'
	   and em.employ_no = #{empno}
	</select>
	
	<!-- 학생 insert -->
	<insert id="empinsert">
        insert tb_employ
        (
     	     employ_no
   		   , loginID
        ) values (
        	  #{emp_no}
       		, #{new_loginID}
        )
	</insert>
	
	<!-- 재직여부 update -->
	<update id="empupdate">
		   update tb_employ
			  set employ_name = #{emp_name}
  			 	, employ_state = #{emp_state}
     			, employ_join = #{emp_join}
     			, employ_leave = #{emp_leave}
 			where employ_no = #{emp_no}
	</update>
	
	<!-- 취업 정보 삭제 delete -->
	<delete id="empdelete">
		delete from tb_employ
		 where employ_no = #{emp_no}
	</delete>
</mapper>